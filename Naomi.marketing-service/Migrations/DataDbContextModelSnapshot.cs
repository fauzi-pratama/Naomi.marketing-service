// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Naomi.marketing_service.Models.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Naomi.marketing_service.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.ApprovalMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("approval_mapping");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.ApprovalMappingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("integer")
                        .HasColumnName("approval_level")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ApprovalMappingId")
                        .HasColumnType("uuid")
                        .HasColumnName("approval_mapping_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("approver_id")
                        .HasColumnOrder(3);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("JobPosition")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job_position")
                        .HasColumnOrder(4);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("ApprovalMappingId");

                    b.ToTable("approval_mapping_detail");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.BrandViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brand_code")
                        .HasColumnOrder(1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("brand_name")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("brand_view_model");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.CompanyViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("company_description")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("company_view_model");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.MopViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("MopCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mop_code")
                        .HasColumnOrder(3);

                    b.Property<string>("MopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mop_name")
                        .HasColumnOrder(4);

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("mop_view_model");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionAppDisplay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("AccessKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("access_key")
                        .HasColumnOrder(6);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(12);

                    b.Property<string>("AppCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("app_code")
                        .HasColumnOrder(1);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("app_name")
                        .HasColumnOrder(2);

                    b.Property<string>("BaseDirectory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("base_directory")
                        .HasColumnOrder(7);

                    b.Property<string>("BucketName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("bucket_name")
                        .HasColumnOrder(3);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(8);

                    b.Property<string>("Region")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("region")
                        .HasColumnOrder(4);

                    b.Property<string>("SecretKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("secret_key")
                        .HasColumnOrder(5);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.ToTable("promotion_app_display");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionAppImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("AppCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("app_code")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("file_name")
                        .HasColumnOrder(4);

                    b.Property<string>("ImageLink")
                        .HasColumnType("text")
                        .HasColumnName("image_link")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("PromotionHeaderId");

                    b.ToTable("promotion_app_image");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("ApprovalMappingId")
                        .HasColumnType("uuid")
                        .HasColumnName("approval_mapping_id")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("promotion_approval");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionApprovalDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approval_date")
                        .HasColumnOrder(6);

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("integer")
                        .HasColumnName("approval_level")
                        .HasColumnOrder(2);

                    b.Property<string>("ApprovalNotes")
                        .HasColumnType("text")
                        .HasColumnName("approval_notes")
                        .HasColumnOrder(7);

                    b.Property<bool>("Approve")
                        .HasColumnType("boolean")
                        .HasColumnName("approve")
                        .HasColumnOrder(5);

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("approver_id")
                        .HasColumnOrder(3);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(8);

                    b.Property<string>("JobPosition")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("job_position")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("PromotionApprovalId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_approval_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.ToTable("promotion_approval_detail");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(6);

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("channel_name")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("promotion_channel");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(3);

                    b.Property<string>("PromotionClassKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_class_key")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionClassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_class_name")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("promotion_class");

                    b.HasData(
                        new
                        {
                            Id = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(459),
                            LineNum = 1,
                            PromotionClassKey = "ITEM",
                            PromotionClassName = "ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(473)
                        },
                        new
                        {
                            Id = new Guid("8713bd36-48d6-43dd-94b9-407c3aff1528"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(482),
                            LineNum = 2,
                            PromotionClassKey = "CART",
                            PromotionClassName = "CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(484)
                        },
                        new
                        {
                            Id = new Guid("dbf358cb-f43b-4d69-9176-8ee63ac8953f"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(488),
                            LineNum = 3,
                            PromotionClassKey = "MOP",
                            PromotionClassName = "MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(489)
                        },
                        new
                        {
                            Id = new Guid("c386c5f1-d3d2-4e7f-ad6a-34b4f185325c"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(493),
                            LineNum = 4,
                            PromotionClassKey = "Entertain",
                            PromotionClassName = "Entertain",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(495)
                        });
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionEntertain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(11);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(7);

                    b.Property<string>("EmployeeNIP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_nip")
                        .HasColumnOrder(1);

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("employee_name")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("EntertainBudget")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("entertain_budget")
                        .HasColumnOrder(6);

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("job_position")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.ToTable("promotion_entertain");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionEntertainEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<bool?>("DefaultEmail")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("default_email")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("PromotionEntertainId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_entertain_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("PromotionEntertainId");

                    b.ToTable("promotion_entertain_email");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(45);

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brand");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(5);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id")
                        .HasColumnOrder(4);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("company_name")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(42);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(41);

                    b.Property<string>("Depts")
                        .HasColumnType("text")
                        .HasColumnName("depts")
                        .HasColumnOrder(10);

                    b.Property<bool?>("DisplayOnApp")
                        .HasColumnType("boolean")
                        .HasColumnName("display_on_app")
                        .HasColumnOrder(39);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date")
                        .HasColumnOrder(12);

                    b.Property<decimal?>("EntertainBudget")
                        .HasColumnType("numeric")
                        .HasColumnName("entertain_budget")
                        .HasColumnOrder(36);

                    b.Property<string>("MaxDisc")
                        .HasColumnType("text")
                        .HasColumnName("max_disc")
                        .HasColumnOrder(28);

                    b.Property<int>("MaxPromoUsedQty")
                        .HasColumnType("integer")
                        .HasColumnName("max_promo_used_qty")
                        .HasColumnOrder(20);

                    b.Property<string>("MaxPromoUsedType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("max_promo_used_type")
                        .HasColumnOrder(19);

                    b.Property<double>("MaxTransaction")
                        .HasColumnType("double precision")
                        .HasColumnName("max_transaction")
                        .HasColumnOrder(26);

                    b.Property<bool>("MemberOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("member_only")
                        .HasColumnOrder(29);

                    b.Property<string>("Members")
                        .HasColumnType("text")
                        .HasColumnName("members")
                        .HasColumnOrder(31);

                    b.Property<double>("MinTransaction")
                        .HasColumnType("double precision")
                        .HasColumnName("min_transaction")
                        .HasColumnOrder(25);

                    b.Property<string>("MopPromoSelectionCode")
                        .HasColumnType("text")
                        .HasColumnName("mop_promo_selection_code")
                        .HasColumnOrder(33);

                    b.Property<string>("MopPromoSelectionId")
                        .HasColumnType("text")
                        .HasColumnName("mop_promo_selection_id")
                        .HasColumnOrder(32);

                    b.Property<string>("MopPromoSelectionName")
                        .HasColumnType("text")
                        .HasColumnName("mop_promo_selection_name")
                        .HasColumnOrder(34);

                    b.Property<bool>("MultiplePromo")
                        .HasColumnType("boolean")
                        .HasColumnName("multiple_promo")
                        .HasColumnOrder(21);

                    b.Property<int>("MultiplePromoMaxQty")
                        .HasColumnType("integer")
                        .HasColumnName("multiple_promo_max_qty")
                        .HasColumnOrder(22);

                    b.Property<bool>("NewMember")
                        .HasColumnType("boolean")
                        .HasColumnName("new_member")
                        .HasColumnOrder(30);

                    b.Property<string>("NipEntertain")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("nip_entertain")
                        .HasColumnOrder(35);

                    b.Property<string>("Objective")
                        .HasColumnType("text")
                        .HasColumnName("objective")
                        .HasColumnOrder(14);

                    b.Property<string>("PromoDisplayed")
                        .HasColumnType("text")
                        .HasColumnName("promo_displayed")
                        .HasColumnOrder(40);

                    b.Property<string>("PromoTermsCondition")
                        .HasColumnType("text")
                        .HasColumnName("promo_terms_condition")
                        .HasColumnOrder(37);

                    b.Property<string>("PromotionChannel")
                        .HasColumnType("text")
                        .HasColumnName("promotion_channel")
                        .HasColumnOrder(13);

                    b.Property<Guid>("PromotionClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_class_id")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_code")
                        .HasColumnOrder(7);

                    b.Property<string>("PromotionMaterial")
                        .HasColumnType("text")
                        .HasColumnName("promotion_material")
                        .HasColumnOrder(15);

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_name")
                        .HasColumnOrder(9);

                    b.Property<Guid>("PromotionStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_status_id")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("PromotionTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_type_id")
                        .HasColumnOrder(2);

                    b.Property<string>("RedemptionCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("redemption_code")
                        .HasColumnOrder(8);

                    b.Property<string>("RequirementExp")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("requirement_exp")
                        .HasColumnOrder(23);

                    b.Property<string>("ResultExp")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("result_exp")
                        .HasColumnOrder(24);

                    b.Property<string>("ShortDesc")
                        .HasColumnType("text")
                        .HasColumnName("short_desc")
                        .HasColumnOrder(38);

                    b.Property<string>("Sites")
                        .HasColumnType("text")
                        .HasColumnName("sites")
                        .HasColumnOrder(17);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasColumnOrder(11);

                    b.Property<int>("TargetSales")
                        .HasColumnType("integer")
                        .HasColumnName("target_sales")
                        .HasColumnOrder(18);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(44);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(43);

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .HasColumnOrder(27);

                    b.Property<string>("Zones")
                        .HasColumnType("text")
                        .HasColumnName("zones")
                        .HasColumnOrder(16);

                    b.HasKey("Id");

                    b.HasIndex("PromotionCode")
                        .IsUnique();

                    b.ToTable("promotion_header");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("PromotionStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_status_id")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("promotion_history");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(2);

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("material_name")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("promotion_material");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleMopGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(10);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(6);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("MopGroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mop_group_code")
                        .HasColumnOrder(4);

                    b.Property<string>("MopGroupId")
                        .HasColumnType("text")
                        .HasColumnName("mop_group_id")
                        .HasColumnOrder(3);

                    b.Property<string>("MopGroupName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mop_group_name")
                        .HasColumnOrder(5);

                    b.Property<Guid>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("PromotionHeaderId");

                    b.ToTable("promotion_rule_mop_group");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(12);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(8);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("Price")
                        .HasColumnType("text")
                        .HasColumnName("price")
                        .HasColumnOrder(7);

                    b.Property<Guid>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty")
                        .HasColumnOrder(6);

                    b.Property<string>("StockCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("stock_code")
                        .HasColumnOrder(4);

                    b.Property<Guid>("StockCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_code_id")
                        .HasColumnOrder(3);

                    b.Property<string>("StockName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("stock_name")
                        .HasColumnOrder(5);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.HasIndex("PromotionHeaderId");

                    b.ToTable("promotion_rule_requirement");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(13);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(9);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("MaxDisc")
                        .HasColumnType("text")
                        .HasColumnName("max_disc")
                        .HasColumnOrder(8);

                    b.Property<Guid>("PromotionHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_header_id")
                        .HasColumnOrder(1);

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty")
                        .HasColumnOrder(6);

                    b.Property<string>("StockCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("stock_code")
                        .HasColumnOrder(4);

                    b.Property<Guid>("StockCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_code_id")
                        .HasColumnOrder(3);

                    b.Property<string>("StockName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("stock_name")
                        .HasColumnOrder(5);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(12);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(11);

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("PromotionHeaderId");

                    b.ToTable("promotion_rule_result");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("PromotionStatusKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_status_key")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionStatusName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_status_name")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("promotion_status");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(4);

                    b.Property<Guid>("PromotionClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_class_id")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionTypeKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_type_key")
                        .HasColumnOrder(2);

                    b.Property<string>("PromotionTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_type_name")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("promotion_type");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fac8e236-2fb7-4b4a-b644-0680f60fd0a0"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(709),
                            LineNum = 1,
                            PromotionClassId = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            PromotionTypeKey = "ITEM",
                            PromotionTypeName = "BUY X GET Y ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(712)
                        },
                        new
                        {
                            Id = new Guid("e0d70f81-6a25-434d-9055-e50554ef585c"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(719),
                            LineNum = 1,
                            PromotionClassId = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            PromotionTypeKey = "SP",
                            PromotionTypeName = "SPECIAL PRICE ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(720)
                        },
                        new
                        {
                            Id = new Guid("1f57489b-cca0-4392-ae00-3d145012d375"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(727),
                            LineNum = 2,
                            PromotionClassId = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(728)
                        },
                        new
                        {
                            Id = new Guid("886470d3-5e0b-41ed-baa7-10cd94511e10"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(735),
                            LineNum = 2,
                            PromotionClassId = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(737)
                        },
                        new
                        {
                            Id = new Guid("bd4f0c46-7d03-45fa-b33c-77028218593a"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(745),
                            LineNum = 2,
                            PromotionClassId = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            PromotionTypeKey = "BUNDLE",
                            PromotionTypeName = "DISCOUNT BUNDLING ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(747)
                        },
                        new
                        {
                            Id = new Guid("86ed449a-e4bc-4c28-a6e5-3ba18e491e63"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(753),
                            LineNum = 2,
                            PromotionClassId = new Guid("8713bd36-48d6-43dd-94b9-407c3aff1528"),
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(754)
                        },
                        new
                        {
                            Id = new Guid("2524251a-565a-46c0-93d5-deea80c63ff5"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(759),
                            LineNum = 2,
                            PromotionClassId = new Guid("8713bd36-48d6-43dd-94b9-407c3aff1528"),
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(761)
                        },
                        new
                        {
                            Id = new Guid("3c7ed57d-8235-453f-8f97-ba93b3747b4f"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(768),
                            LineNum = 2,
                            PromotionClassId = new Guid("dbf358cb-f43b-4d69-9176-8ee63ac8953f"),
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(770)
                        },
                        new
                        {
                            Id = new Guid("dda43968-95bd-4d94-8737-fd621d0a5895"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(775),
                            LineNum = 2,
                            PromotionClassId = new Guid("dbf358cb-f43b-4d69-9176-8ee63ac8953f"),
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(776)
                        },
                        new
                        {
                            Id = new Guid("57ae0d50-1d3b-4a33-8d7c-a4cab863aa30"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(782),
                            LineNum = 2,
                            PromotionClassId = new Guid("c386c5f1-d3d2-4e7f-ad6a-34b4f185325c"),
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT Entertain",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 21, 10, 16, 16, 148, DateTimeKind.Local).AddTicks(783)
                        });
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.SiteViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("SiteDescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("site_description")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("site_view_model");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.ZoneViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.Property<string>("ZoneCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zone_code")
                        .HasColumnOrder(3);

                    b.Property<string>("ZoneName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("zone_name")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("zone_view_model");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.ApprovalMappingDetail", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.ApprovalMapping", null)
                        .WithMany("ApprovalMappingDetail")
                        .HasForeignKey("ApprovalMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionAppImage", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.PromotionHeader", null)
                        .WithMany("PromoAppImages")
                        .HasForeignKey("PromotionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionEntertainEmail", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.PromotionEntertain", null)
                        .WithMany("EmpEmails")
                        .HasForeignKey("PromotionEntertainId");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleMopGroup", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.PromotionHeader", null)
                        .WithMany("PromoRuleMops")
                        .HasForeignKey("PromotionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleRequirement", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.PromotionHeader", null)
                        .WithMany("PromoRuleRequirements")
                        .HasForeignKey("PromotionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionRuleResult", b =>
                {
                    b.HasOne("Naomi.marketing_service.Models.Entities.PromotionHeader", null)
                        .WithMany("PromoRuleResults")
                        .HasForeignKey("PromotionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.ApprovalMapping", b =>
                {
                    b.Navigation("ApprovalMappingDetail");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionEntertain", b =>
                {
                    b.Navigation("EmpEmails");
                });

            modelBuilder.Entity("Naomi.marketing_service.Models.Entities.PromotionHeader", b =>
                {
                    b.Navigation("PromoAppImages");

                    b.Navigation("PromoRuleMops");

                    b.Navigation("PromoRuleRequirements");

                    b.Navigation("PromoRuleResults");
                });
#pragma warning restore 612, 618
        }
    }
}
